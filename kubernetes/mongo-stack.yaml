# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: mongodb-secret
# type: Opaque
# data:
#   mongo-root-username: bW9uZ29hZG1pbg==     # mongoadmin
#   mongo-root-password: c2VjdXJlcGFzcw==     # securepass

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: mongodb-configmap
# data:
#   database_url: mongodb-service

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mongodb-pvc
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb-service
#   namespace: mongodb
# spec:
#   selector:
#     app: mongodb
#   ports:
#     - protocol: TCP
#       port: 27017
#       targetPort: 27017

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mongodb
#   namespace: mongodb
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mongodb
#   template:
#     metadata:
#       labels:
#         app: mongodb
#     spec:
#       containers:
#         - name: mongodb
#           image: mongo
#           ports:
#             - containerPort: 27017
#           env:
#             - name: MONGO_INITDB_ROOT_USERNAME
#               valueFrom:
#                 secretKeyRef:
#                   name: mongodb-secret
#                   key: mongo-root-username
#             - name: MONGO_INITDB_ROOT_PASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: mongodb-secret
#                   key: mongo-root-password
#           # volumeMounts:
#           #   - name: mongodb-storage
#           #     mountPath: /data/db
#           livenessProbe:
#             tcpSocket:
#               port: 27017
#             initialDelaySeconds: 10
#             periodSeconds: 10
#           readinessProbe:
#             tcpSocket:
#               port: 27017
#             initialDelaySeconds: 5
#             periodSeconds: 5
#       # volumes:
#       #   - name: mongodb-storage
#       #     persistentVolumeClaim:
#       #       claimName: mongodb-pvc

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongo-express-service
# spec:
#   selector:
#     app: mongo-express
#   ports:
#     - protocol: TCP
#       port: 8081
#       targetPort: 8081

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mongo-express
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mongo-express
#   template:
#     metadata:
#       labels:
#         app: mongo-express
#     spec:
#       containers:
#         - name: mongo-express
#           image: mongo-express
#           ports:
#             - containerPort: 8081
#           env:
#             - name: ME_CONFIG_MONGODB_SERVER
#               valueFrom:
#                 configMapKeyRef:
#                   name: mongodb-configmap
#                   key: database_url
#             - name: ME_CONFIG_MONGODB_ADMINUSERNAME
#               valueFrom:
#                 secretKeyRef:
#                   name: mongodb-secret
#                   key: mongo-root-username
#             - name: ME_CONFIG_MONGODB_ADMINPASSWORD
#               valueFrom:
#                 secretKeyRef:
#                   name: mongodb-secret
#                   key: mongo-root-password
#           livenessProbe:
#             httpGet:
#               path: /
#               port: 8081
#             initialDelaySeconds: 10
#             periodSeconds: 5
#             failureThreshold: 3
#           readinessProbe:
#             httpGet:
#               path: /
#               port: 8081
#             initialDelaySeconds: 5
#             periodSeconds: 5

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mongo-express-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: mongo.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: mongo-express-service
                port:
                  number: 8081
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ecommerce-ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   rules:
#   - host: shop.example.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: web-service
#             port:
#               number: 80

#   - host: api.shop.example.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: api-service
#             port:
#               number: 80

#   - host: admin.shop.example.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: admin-service
#             port:
#               number: 80

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ecommerce-ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   rules:
#   - host: shop.example.com
#     http:
#       paths:
#       - path: /             # Frontend
#         pathType: Prefix
#         backend:
#           service:
#             name: web-service
#             port:
#               number: 80
#       - path: /api          # Backend API
#         pathType: Prefix
#         backend:
#           service:
#             name: api-service
#             port:
#               number: 80
#       - path: /admin        # Admin dashboard
#         pathType: Prefix
#         backend:
#           service:
#             name: admin-service
#             port:
#               number: 80
# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ecommerce-ingress
# spec:
#   tls:
#   - hosts:
#     - shop.example.com
#     secretName: shop-tls-secret   # Your TLS secret containing cert + key
#   rules:
#   - host: shop.example.com
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: web-service
#             port:
#               number: 80
#       - path: /api
#         pathType: Prefix
#         backend:
#           service:
#             name: api-service
#             port:
#               number: 80
#       - path: /admin
#         pathType: Prefix
#         backend:
#           service:
#             name: admin-service
#             port:
#               number: 80


# # kubectl create secret tls shop-tls-secret \
# #   --cert=/path/to/tls.crt \
# #   --key=/path/to/tls.key
